from langchain_community.document_loaders import UnstructuredPDFLoader
from langchain_community.embeddings import OllamaEmbeddings
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain.prompts import ChatPromptTemplate, PromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_community.chat_models import ChatOllama
from langchain_core.runnables import RunnablePassthrough
from langchain.retrievers.multi_query import MultiQueryRetriever
import os

# Persistent database setup (using Chroma)
vector_db_path = "/mnt/c/testlama/vector_db"  # Replace with actual path
vector_db = None
'''
try:
    vector_db = Chroma.load(vector_db_path, collection_name="local-rag")  # Try loading existing database
except FileNotFoundError:
    vector_db = None  # Initialize an empty database if not found
'''
def process_pdfs_and_build_db(pdf_directory):
    """
    Processes multiple PDF files in a directory, splits them, generates embeddings,
    and stores them in a persistent Chroma DB.

    Args:
        pdf_directory (str): Path to the directory containing PDF files.
    """

    global vector_db  # Access the global variable

    if not vector_db:
        vector_db = Chroma(collection_name="local-rag")  # Create new database if needed

    for filename in os.listdir(pdf_directory):
        if filename.endswith(".pdf"):
            file_path = os.path.join(pdf_directory, filename)
            loader = UnstructuredPDFLoader(file_path=file_path)
            data = loader.load()

            text_splitter = RecursiveCharacterTextSplitter(chunk_size=7500, chunk_overlap=100)
            chunks = text_splitter.split_documents(data)

            # Generate embeddings and add them to the Chroma DB
            vector_db.add_with_embeddings(
                documents=chunks,
                embedding=OllamaEmbeddings(model="nomic-embed-text", show_progress=True)
            )

    # Persist the Chroma DB (using Chroma's save method)
    
    
    

def query_processed_pdfs(question):
    """
    Queries the persistent Chroma DB using the provided question and the Ollama LLM
    for multi-perspective retrieval.

    Args:
        question (str): The user's question to be answered.

    Returns:
        str: The answer generated by the Ollama LLM based on retrieved documents.
    """

    if not vector_db:
        print("No PDFs have been processed yet. Please process PDFs first.")
        return

    llm = ChatOllama(model="llama2")  # Create a new LLM instance for each query

    QUERY_PROMPT = PromptTemplate(
        input_variables=["question"],
        template="""You are an AI language model assistant. Your task is to generate five
        different versions of the given user question to retrieve relevant documents from
        a vector database. By generating multiple perspectives on the user question, your
        goal is to help the user overcome some of the limitations of the distance-based
        similarity search. Provide these alternative questions separated by newlines.
        Original question: {question}""",
    )

    retriever = MultiQueryRetriever.from_llm(
        vector_db.as_retriever(), llm, prompt=QUERY_PROMPT
    )

    template = """Answer the question based ONLY on the following context:
    {context}
    Question: {question}
    """

    prompt = ChatPromptTemplate.from_template(template)

    chain = (
        {"context": retriever, "question": RunnablePassthrough()}
        | prompt
        | llm
        | StrOutputParser()
    )

    return chain.invoke(question)

# Example usage
pdf_directory = "/mnt/c/testlama/PDF"  # Replace with your actual directory path
process_pdfs_and_build_db(pdf_directory)

question = "What are the key challenges to global cooperation in the 21st century?"

answer = query_processed_pdfs(question)

print(answer)